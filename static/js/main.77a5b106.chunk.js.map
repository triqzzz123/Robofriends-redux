{"version":3,"sources":["serviceWorker.js","Components/Cards.js","Components/CardsList.js","Components/Scroll.js","Components/Search.js","Container/App.js","action.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","id","name","email","className","alt","src","CardsList","robo","map","user","i","key","Scroll","props","style","overflow","border","height","children","Search","searchnew","type","placeholder","onChange","App","event","this","onRequestRobots","searchField","onSearchChange","robots","isPending","filterobots","filter","cat","toLowerCase","includes","Component","connect","state","console","log","searchRobots","requestRobots","dispatch","payload","target","value","fetch","then","resp","json","data","catch","err","initialStateSearch","initialStateRobots","error","rootReducers","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.77a5b106.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\n\n\nlet Cards =({id,name,email})=>{\n \nreturn(\n<div className=\"tc bg-yellow dib br3 bw3 pa2 ma2 grow shadow-5\">\n\n\n\n<img  alt=\"robots\" src={`https://robohash.org/ ${id}?200x200` } />\n<h2>{name}</h2>\n<p>{email}</p>\n\n\n\n</div>\n\n\n)\n\n}\n\nexport default Cards","import React from 'react';\nimport Cards from './Cards';\n\n\nlet CardsList=({robo})=>{     \nreturn(\n    <div>\n    {\n    robo.map((user,i)=>{\n\n        return(\n        \n          <Cards\n           \n           key={i}\n\n           id={robo[i].id}\n            name={robo[i].name}\n             email={robo[i].name}\n             \n             />\n        );\n        })\n    \n    }\n\n\n\n\n</div>\n);\n\n}\nexport default CardsList;","import React from 'react';\n\n\nconst Scroll =(props)=>{\n \nreturn (\n     <div style={{overflow:'scroll',border:'3px red solid',height:'800px' }}  >\n\n    { props.children}\n\n     </div>\n\n\n)\n    \n    \n\n\n\n}\n\n\n\nexport default Scroll;","import React from \"react\";\n\nconst Search =({searchnew})=>{\n\nreturn(\n<div  className=\"pa2\">\n    <input  \n    className=\"pa2 bg-lightest-blue\"\n    type=\"search\" placeholder=\"robots\"\n    onChange={searchnew}\n    \n    \n    />\n    \n    \n    \n   </div> \n\n)\n\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport CardsList from '../Components/CardsList';\nimport Scroll from '../Components/Scroll';\nimport Search from '../Components/Search';\nimport {connect} from 'react-redux';\nimport './App.css';\n\nimport {setSearchField,requestRobots} from '../action';\n\nconst mapStateToProps=state=>{\n    console.log(\"hi\",state)\n    return{\n      searchField:state.searchRobots.searchField, \n      robots:state.requestRobots.robots,\n      isPending:state.requestRobots.isPending\n    }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n    return {\n        onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\n        onRequestRobots:()=>dispatch(requestRobots())\n\n    }\n}\n \nclass App extends Component{\n    \n    componentDidMount(event){\n  this.props.onRequestRobots()\n    }\n     \n        \n     render(){\n\n        const{searchField,onSearchChange,robots,isPending}=this.props;\n        \n        const filterobots=robots.filter(cat=>{\n            return cat.name.toLowerCase().includes(searchField.toLowerCase())\n            \n        })\n        return isPending ?\n            <h1 className=\"tc\">now loading</h1> :\n    \n        (\n\n\n            <div className=\"tc\">\n            \n            <h1 className=\"f1\">robofriends</h1>\n            <Search   searchnew={onSearchChange}/>\n            <Scroll>\n            <CardsList robo ={filterobots}/>   \n            </Scroll>\n            \n            </div>\n            \n              )\n        }\n              \n              \n        }\n        \n    \n\n    \nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\nCHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCESS,\r\nREQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n\r\nexport const setSearchField =(text)=>({\r\n type:CHANGE_SEARCH_FIELD,\r\n payload:text\r\n\r\n})\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n   dispatch({type:REQUEST_ROBOTS_PENDING})\r\n\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(resp=>resp.json())\r\n  .then(data=>dispatch({\r\n      type:REQUEST_ROBOTS_SUCESS,\r\n      payload:data\r\n  }))\r\n  .catch(err=>dispatch({\r\n   type:REQUEST_ROBOTS_FAILED,\r\n   payload:err\r\n  }\r\n))\r\n\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCESS='REQUEST_ROBOTS_SUCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n\r\n","import {CHANGE_SEARCH_FIELD,\r\nREQUEST_ROBOTS_PENDING,\r\nREQUEST_ROBOTS_SUCESS,\r\nREQUEST_ROBOTS_FAILED\r\n\r\n} from './constants';\r\n\r\nconst initialStateSearch={\r\n \r\n    searchField:''\r\n\r\n}\r\n\r\n\r\nexport const searchRobots =(state=initialStateSearch,action={})=>{\r\n\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD: \r\n        return Object.assign({},state,{searchField:action.payload});\r\n\r\n        default : \r\n        return state;\r\n    }\r\n\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n    \r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCESS :\r\n            return Object.assign({},state,{robots:action.payload,isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n          return Object.assign({},state,{error:action.payload,isPending:false});\r\n       default:\r\n           return state\r\n}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport 'tachyons';\nimport App from './Container/App';\nimport { searchRobots,requestRobots } from './reducer';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst rootReducers=combineReducers({searchRobots,requestRobots})\n\nconst logger=createLogger()\nconst store=createStore(rootReducers,applyMiddleware(thunkMiddleware,logger));\n\n\nReactDOM.render(\n  <Provider store={store}>\n   <App />\n   </Provider>,\n     document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}